#!/usr/bin/env python


import json
import Globals, sys, ast, yaml, os, tempfile
from transaction import commit
from Products.ZenUtils.ZenScriptBase import ZenScriptBase





if len(sys.argv) < 3:
     sys.exit('\nError faltan argumentos\n\nUsage: %s "fichero_MIBS" "cabecera"\n\n' % sys.argv[0])

file = sys.argv[1]
cabecera = sys.argv[2].upper()


#carga del fichero de mibs

filestr = '' #String para leer fichero de datos

definitions = [] 	#Array para importar a ZENOSS
###########################################

#EXTRAER LAS TRAPS DEL FICHERO DE MIB
outfile = tempfile.mkstemp(prefix="traps-out")
errfile = tempfile.mkstemp(prefix="traps-err")
os.system("smidump --keep-going -f python %s > %s 2> %s " %  (file, outfile[1], errfile[1]))
errmsgs = open(errfile[1], "r").read()
os.unlink(errfile[1])
code = open(outfile[1],"r").read()
os.unlink(outfile[1])
try:
	exec(code)
except Exception, e:
	print >> sys.stderr, "%s - ha fallado la carga de la mib, %s" % (file, errmsgs)
	sys.exit(1)


	
try:
	traps = MIB['notifications']
	
except NameError:
	print >> sys.stderr, "%s was too badly formed to have output\n%s" % (file, errmsgs)
	sys.exit(1)
#print "traps: %s" % traps



for n , v in traps.items():
	nombre_trap_nuevo = cabecera + n
	traps[nombre_trap_nuevo] = traps.pop(n)
	print (nombre_trap_nuevo)
	varbinds = traps.get(nombre_trap_nuevo)['objects']
	for o , b in varbinds.items():
		nombre_varbinds_nuevo = cabecera + o
		varbinds[nombre_varbinds_nuevo] = varbinds.pop(o)
	



	
try:
	nodos = MIB['nodes']
	
except NameError:
	print >> sys.stderr, "%s was too badly formed to have output\n%s" % (file, errmsgs)
	sys.exit(1)
#print "traps: %s" % traps



for n , v in nodos.items():
	nombre_nodo_nuevo = cabecera + n
	nodos[nombre_nodo_nuevo] = nodos.pop(n)
	print (nombre_nodo_nuevo)
	
	
	
	
	
exportfile="/tmp/MIB_MODIFICADA.MIB"	
cabecera_file = """
# python version 1.0                                            DO NOT EDIT
#
# Generated by smidump version 0.4.8:
#
#   smidump -f python PowerNet-MIB

FILENAME = "%s"

MIB = """ % file

if os.path.isfile(exportfile):
        os.remove(exportfile)	
with open(exportfile, 'a') as output:
	output.write(cabecera_file)
	json.dump(MIB, output, indent=2)
	output.close()
	# Import MIB command
	print ("Lanzando comando de carga de MIB: zenmib...")
	print ("zenmib run -v10 --evalSavedPython='%s'" %  exportfile)
	os.system("zenmib run -v10 --evalSavedPython='%s'" %  exportfile)





	
	

	   


	
	
	








